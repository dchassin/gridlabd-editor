from pandas import *
from datetime import *

class TMY3:

    def __init__(self,filename,coerce_year=None):
        info = read_table(filename,
            delimiter=",",
            skiprows=0,
            nrows=1,
            header=None,
            names=["station","name","state","tzoffset","latitude","longitude","elevation"])
        for item in info.columns:
            setattr(self,item,info[item])
        def get_date(dt,coerce_year=coerce_year):
            if coerce_year:
                return datetime.strptime(dt,"%m/%d/%Y").replace(year=coerce_year).date()
            else:
                return datetime.strptime(dt,"%m/%d/%Y").date()
        def get_time(dt):
            return time(hour=int(dt.split(':')[0])-1)
        self.dataframe = read_table(filename,delimiter=",",skiprows=1,nrows=8760,header=0,
            converters={
                'Date (MM/DD/YYYY)' : get_date,
                'Time (HH:MM)' : get_time,
                'ETR (W/m^2)' : float, 
                'ETRN (W/m^2)' : float,
                'GHI (W/m^2)' : float, 
                'GHI source' : float,
                'GHI uncert (%)' : float, 
                'DNI (W/m^2)' : float,
                'DNI source' : str,
                'DNI uncert (%)' : float,
                'DHI (W/m^2)' : float,
                'DHI source' : str,
                'DHI uncert (%)' : float,
                'GH illum (lx)' : float,
                'GH illum source' : str,
                'Global illum uncert (%)' : float,
                'DN illum (lx)' : float,
                'DN illum source' : str,
                'DN illum uncert (%)' : float,
                'DH illum (lx)' : float,
                'DH illum source' : str,
                'DH illum uncert (%)' : float,
                'Zenith lum (cd/m^2)' : float,
                'Zenith lum source' : str,
                'Zenith lum uncert (%)' : float,
                'TotCld (tenths)' : float,
                'TotCld source' : str,
                'TotCld uncert (code)' : int,
                'OpqCld (tenths)' : float,
                'OpqCld source' : str,
                'OpqCld uncert (code)' : int,
                'Dry-bulb (C)' : float,
                'Dry-bulb source' : str,
                'Dry-bulb uncert (code)' : int,
                'Dew-point (C)' : float,
                'Dew-point source' : str,
                'Dew-point uncert (code)' : int,
                'RHum (%)' : float,
                'RHum source' : str,
                'RHum uncert (code)' : int,
                'Pressure (mbar)' : float,
                'Pressure source' : str,
                'Pressure uncert (code)' : int,
                'Wdir (degrees)' : float,
                'Wdir source' : str,
                'Wdir uncert (code)' : int,
                'Wspd (m/s)' : float,
                'Wspd source' : str,
                'Wspd uncert (code)' : int,
                'Hvis (m)' : float,
                'Hvis source' : str,
                'Hvis uncert (code)' : int,
                'CeilHgt (m)' : float,
                'CeilHgt source' : str,
                'CeilHgt uncert (code)' : int,
                'Pwat (cm)' : float,
                'Pwat source' : str,
                'Pwat uncert (code)' : int,
                'AOD (unitless)' : float,
                'AOD source' : str,
                'AOD uncert (code)' : int,
                'Alb (unitless)' : float,
                'Alb source' : str,
                'Alb uncert (code)' : int,
                'Lprecip depth (mm)' : float,
                'Lprecip quantity (hr)' : float,
                'Lprecip source' : str,
                'Lprecip uncert (code)' : int,
                'PresWth (METAR code)' : int,
                'PresWth source' : str,
                'PresWth uncert (code)': int,
            })
        self.dataframe.index.name = "Hour"
        self.dataframe.insert(0,'DateTime',list(map(lambda x,y: datetime(x.year,x.month,x.day,y.hour),*(self.dataframe['Date (MM/DD/YYYY)'],self.dataframe['Time (HH:MM)']))))
        for column, name in {
            'DateTime' : 'datetime',
            'Date (MM/DD/YYYY)' : "date",
            'Time (HH:MM)' : "hour",
            'ETR (W/m^2)' : "etr", 
            'ETRN (W/m^2)' : "etrn",
            'GHI (W/m^2)' : "ghi", 
            'DNI (W/m^2)' : "dni",
            'DHI (W/m^2)' : "dhi",
            'GH illum (lx)' : "ghillum",
            'DN illum (lx)' : "dnillum",
            'DH illum (lx)' : "dhillum",
            'Zenith lum (cd/m^2)' : "zenlu ",
            'TotCld (tenths)' : "totcld",
            'OpqCld (tenths)' : "opqcld",
            'Dry-bulb (C)' : "drybulb",
            'Dew-point (C)' : "dewpoint",
            'RHum (%)' : "rhum",
            'Pressure (mbar)' : "pressure",
            'Wdir (degrees)' : "wdir",
            'Wspd (m/s)' : "wspd",
            'Hvis (m)' : "hvis",
            'CeilHgt (m)' : "ceilhgt",
            'Pwat (cm)' : "pwat",
            'AOD (unitless)' : "aod",
            'Alb (unitless)' : "alb",
            'Lprecip depth (mm)' : "lprecipdepth",
            'Lprecip quantity (hr)' : "lprecipquantity",
        }.items():
            setattr(self,name,self.dataframe[column])
        self.units = {
            'ETR (W/m^2)' : "W/m^2", 
            'ETRN (W/m^2)' : "W/m^2",
            'GHI (W/m^2)' : "W/m^2", 
            'DNI (W/m^2)' : "W/m^2",
            'DHI (W/m^2)' : "W/m^2",
            'GH illum (lx)' : "lx",
            'DN illum (lx)' : "lx",
            'DH illum (lx)' : "lx",
            'Zenith lum (cd/m^2)' : "cd/m^2 ",
            'TotCld (tenths)' : "0.1unit",
            'OpqCld (tenths)' : "0.1unit",
            'Dry-bulb (C)' : "C",
            'Dew-point (C)' : "C",
            'RHum (%)' : "%",
            'Pressure (mbar)' : "mbar",
            'Wdir (degrees)' : "deg",
            'Wspd (m/s)' : "m/s",
            'Hvis (m)' : "m",
            'CeilHgt (m)' : "m",
            'Pwat (cm)' : "cm",
            'AOD (unitless)' : "unit",
            'Alb (unitless)' : "unit",
            'Lprecip depth (mm)' : "mm",
            'Lprecip quantity (hr)' : "hr",

        }

